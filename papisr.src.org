* frontpage
:PROPERTIES:
:export_file_name: README.md
:export_options: toc:nil
:export_options+: author:nil
:export_options+: title:nil
:END:

** papisr

#+name: md-badges
#+begin_export markdown
[![R-CMD-check](https://github.com/stasvlasov/papisr/workflows/R-CMD-check/badge.svg)](https://github.com/stasvlasov/papisr/actions)
[![codecov](https://codecov.io/gh/stasvlasov/papisr/branch/master/graph/badge.svg?token=1HD07SWHSH)](https://codecov.io/gh/stasvlasov/papisr)
![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/stasvlasov/papisr)
#+end_export

#+name: package-title
#+begin_src markdown :exports none
  Bundle of convenience functions for papis workflows in R.
#+end_src

#+name: package-description
#+begin_src markdown :exports none
  Provides some convenience functions for [papis](https://github.com/papis/papis) workflows in R. Papis is a 'powerful and highly extensible command-line based document and bibliography manager'. The package does not actually require `papis` to be installed in order for its functions to work.
#+end_src

#+name: readme-header
#+begin_src emacs-lisp :noweb yes :exports results :wrap EXPORT markdown :results value replace
  "<<package-title>>

  <<package-description>>"
#+end_src

#+RESULTS: readme-header
#+begin_EXPORT markdown
Bundle of convenience functions for papis workflows in R.

Provides some convenience functions for [papis](https://github.com/papis/papis) workflows in R. Papis is a 'powerful and highly extensible command-line based document and bibliography manager'. The package does not actually require `papis` to be installed in order for its functions to work.
#+end_EXPORT

*** Installation
#+BEGIN_SRC R
  ## Installs and loads papisr
  devtools::install_github("stasvlasov/papisr")
  library("papisr")
#+END_SRC

*** Usage
Suppose you have a papis library located in ~testdata/papis~ that includes 4 simple bibliographic records (see below for the content of files). This example papis library is provided with the package and accessible with ~system.file()~

Now, for example, if you want to tabulate ~year~ and ~url~ fields and number of ~tags~ for each record that is not tagged as 'classics' you can do it with the following simple script:


#+BEGIN_SRC R :results replace :colnames yes
  system.file("testdata", "papis", package = "papisr") |>
      papisr::collect_papis_records(!("classics" %in% info$tags)) |>
      papisr::tabulate_papis_records(`Year` = info$year
                                   , `URL` = info$url
                                   , `No. of tags` = length(info$tags))
#+END_SRC

The script returns the following data.frame:

| Year | URL         | No. of tags |
|------+-------------+-------------|
| 2022 | example.com |           2 |
| 1985 | uvt.nl      |           2 |
| 2222 |             |           1 |

Here 3 out of 4 records were tabulated because the one records with ~tag~ "classics" was filtered out.

*** Test records in papis format
:PROPERTIES:
:ID:       org:rsdio3a15hj0
:END:

~testdata/papis/a/info.yml~
#+BEGIN_SRC yaml :tangle "inst/testdata/papis/a/info.yml" :mkdirp yes
  tags:
    - data
    - research
  url: example.com
  year: 2022
#+END_SRC

~testdata/papis/b/info.yml~
#+BEGIN_SRC yaml :tangle "inst/testdata/papis/b/info.yml" :mkdirp yes
  tags:
    - research
    - phd
  url: uvt.nl
  year: 1985
#+END_SRC

~testdata/papis/c/INFO.YML~
#+BEGIN_SRC yaml :tangle "inst/testdata/papis/c/INFO.YML" :mkdirp yes
  tags: data
  year: 2222
#+END_SRC

~testdata/papis/d/info.yaml~
#+BEGIN_SRC yaml :tangle "inst/testdata/papis/d/info.yaml" :mkdirp yes
  tags: classics
  year: 2000
#+END_SRC



* deploy
#+name: deploy
#+begin_src emacs-lisp
  (save-excursion
    (let ((calls '(
                   "reset-working-directory"
                   "readme-header"
                   "tangle-readme"
                   "tangle-buffer"
                   "description-and-license"
                   "roxygenize"
                   "setup-tinytest"
                   ))
          ;; turn off babel prompts
          org-confirm-babel-evaluate)
      (mapcar
       (lambda (name)
         (save-excursion
           (org-babel-goto-named-src-block name)
           (or (org-babel-execute-src-block-maybe)
               (org-babel-lob-execute-maybe))))
       calls)))
#+end_src

** reset working directory
#+name: reset-working-directory
#+BEGIN_SRC R :tangle no
  ## Remove tangled and generated files
  ## --------------------------------------------------------------------------------
  dirs_to_remove <-c(
      "man"
    , "inst"
    , "tests"
    , "data"
    , "R"
  )

  files_to_remove <- c(
      "DESCRIPTION"
    , "NAMESPACE"
    , "LICENSE.md"
    , "LICENSE"
    , "README.md"
    , ".gitignore"
    , ".Rbuildignore"
  )

  dirs_to_remove |>
      lapply(list.files
           , recursive = TRUE
           , full.names = TRUE
           , include.dirs = TRUE) |>
      unlist() |>
      rev() |>
      c(dirs_to_remove, files_to_remove) |>
      sapply(\(file) if(file.exists(file)) file.remove(file))
#+END_SRC

** tangle sources
#+name: tangle-buffer
#+BEGIN_SRC emacs-lisp :results none
  (org-babel-tangle)
#+END_SRC
** tinytest setup
#+name: setup-tinytest
#+BEGIN_SRC R :session
  tinytest::setup_tinytest(".")
#+END_SRC

** github workflows and badges setup
https://github.com/r-lib/actions/blob/v1/examples/README.md
#+name: setup-github-actions
#+BEGIN_SRC R :session
  usethis::use_github_action("check-release")
  usethis::use_github_action("test-coverage")
  usethis::use_github_action("pkgdown")
  usethis::use_github_actions_badge(name = "R-CMD-check")
#+END_SRC

** .gitignore
#+name: tangle-gitignore
#+BEGIN_SRC Gitignore :tangle ".gitignore"
*.project.org
.DS_Store

# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# R Environment Variables
.Renviron
#+END_SRC

** .Rbuildignore
#+name: tangle-rbuildignore
#+BEGIN_SRC Fundamental :tangle ".Rbuildignore"
^LICENSE\.md$
^\.github$
^_pkgdown\.yml$
^docs$
^pkgdown$
#+END_SRC



** README.md
#+name: tangle-readme
#+begin_src emacs-lisp
  (require 'org-goto)
  (save-excursion
    (org-goto--local-search-headings "frontpage" nil t)
    ;; (org-pandoc-export-to-markdown nil 'subtreep)
    (org-md-export-to-markdown nil 'subtreep)
    )
#+end_src

** Description and License
:PROPERTIES:
:ID:       org:qaljap21baj0
:END:

#+name: suggest-packages
| names          | link                                                                |
|----------------+---------------------------------------------------------------------|
| tinytest       | https://github.com/markvanderloo/tinytest/blob/master/pkg/README.md |
| checkmate      | https://mllg.github.io/checkmate/                                   |


#+name: dependencies
| packages | current_version | ensure_version | link                                              |
|----------+-----------------+----------------+---------------------------------------------------|
| R        | nil             |            4.0 |                                                   |
| yaml     | 2.3.5           |          2.3.0 | [[https://github.com/vubiostat/r-yaml][R package for converting objects to and from YAML]] |


#+name: get-package-vesion
#+header: :var pkg = "base"
#+BEGIN_SRC R :results value replace
  packageVersion(pkg)
#+END_SRC

#+name: description-and-license
#+header: :var suggest_packages = suggest-packages
#+header: :var dependencies = dependencies
#+BEGIN_SRC R :noweb yes :session
  ## set description
  suppressWarnings(file.remove("DESCRIPTION"))
  list(Title  = "<<package-title>>"
     , Description = "<<package-description>>"
     , Date = Sys.Date()
     , `Authors@R` = 'as.person("Stanislav Vlasov <s.vlasov@uvt.nl> [aut, cre]")'
     , Version = "0.0.0.9000"
     , URL = "https://stasvlasov.github.io/papisr/"
     , BugReports = "https://github.com/stasvlasov/papisr/issues"
     , Suggests = paste(suggest_packages$names, collapse = ", ")
     , References = 'Alejandro Gallo, Nicolò Balzarotti, Michael Plews, Alex Fikl, Jackson Woodruff, Matthieu Coudron, Alexander Von Moll, gouderm, Sébastien M. Popoff, Henrik Grimler, JP-Ellis, Katrin Leinweber, Manuel Haussmann, Andrew Ramsey, Andrey Akinshin, CosmosAtlas, dbruggner, hayk, Henning Timm, … prataffel. (2022). papis/papis: VERSION 0.12 (v0.12). Zenodo. https://doi.org/10.5281/zenodo.6573964'
     , Depends = paste(
           paste0(dependencies$packages, " (>= ", dependencies$ensure_version, ")")
         , collapse = ", ")) |>
      usethis::use_description()
  ## Set license
  suppressWarnings(file.remove("LICENSE", "LICENSE.md"))
  usethis::use_mit_license()
  ## usethis::use_lgpl_license()
  ## usethis::use_apache_license()  
#+END_SRC

** Documentation
:PROPERTIES:
:ID:       org:1lkit051baj0
:END:
#+BEGIN_SRC R :tangle R/papisr.r :noweb yes
  #' @details
  #' <<package-title>>
  #' 
  #' <<package-description>>
  #' @md
  "_PACKAGE"
#+END_SRC

#+name: roxygenize
#+BEGIN_SRC R
  ## Update name spaces and documentation for functions
  roxygen2::roxygenize()
#+END_SRC

** Install package
#+name: install-package
#+BEGIN_SRC R :tangle no
  ## Unload and uninstall package
  ## --------------------------------------------------------------------------------
  detach(package:papisr, unload = TRUE)
  remove.packages("papisr")
  
  ## Install package
  ## --------------------------------------------------------------------------------
  devtools::install(".")
#+END_SRC


* papisr functions
:PROPERTIES:
:ID:       org:1nneg0902hj0
:END:

** collect_papis_records
#+name: 
#+BEGIN_SRC R :tangle R/papisr.r :mkdirp yes
  ##' Collects papis records
  ##'
  ##' The collection is done by (1) looking for all subdirectories with info.yml file that defines papis record, (2) filtering those records and (3) returning lists of 'path' (root dir of papis record) and 'info' (content of info.yml) for each record
  ##' 
  ##' @param dir Directory to scan recursevely for papis records
  ##' @param filter_info Exprocion that allows to filter info.yml files that is evaluated in the environment with two variables bound for each record - 'path' (root dir of papis record) and 'info' (content of info.yml). The expression should return TRUE in order for record to be filtered in. Other returned value will filter the record out. Example: `'data' %in% info$tags` will filter only records that have tag 'data' in their info.yml descriptions
  ##' @return list of 'path' (root dir of papis record) and 'info' (content of info.yml) for each record
  ##' 
  ##' @md 
  ##' @export 
  collect_papis_records <- function(dir, filter_info) {
      papis_info_yml_files <- 
          list.files(dir
                   , pattern = "^info\\.y[a]?ml$"
                   , full.names = TRUE
                   , recursive = TRUE
                   , ignore.case = TRUE)
      papis_records <-
          papis_info_yml_files |>
          lapply(\(info_yml_file)
                 list(path = dirname(info_yml_file)
                    , info = yaml::read_yaml(info_yml_file)))
      ## filter info.yml files based on some filter criteria
      if(!missing(filter_info)) {
          ## save this env because substitute does not enherit from parents
          ## and can not find `filter_info` when called from sapply func env
          env <- environment()
          papis_records_filter <-
              papis_records |>
              sapply(\(papis_record) {
                  substitute(filter_info, env)  |>
                      ## bind papis_record to eval env
                      eval(envir = papis_record) |>
                      isTRUE()
              })
          return(papis_records[papis_records_filter])
      } else {
          return(papis_records)
      }
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_collect_papis_records.r
  expect_equal(
    system.file("testdata", "papis", package = "papisr") |>
    collect_papis_records("data" %in% info$tags) |>
    lapply(`[[`, "info")
    ## remove paths as in test environment it is different
  , list(list(tags = c("data", "research"), url = "example.com", 
      year = 2022L), list(tags = "data", year = 2222L)))
#+END_SRC

** tabulate_papis_records

#+BEGIN_SRC R :tangle R/papisr.r :mkdirp yes
  ##' Tablulate papis records
  ##' 
  ##' @param papis_records List of papis records as returned by `collect_papis_records()`
  ##' @param ... Colums specification as named expressions that are evaluated in papis record environment where two variables are bound - `path` and `info` (see `collect_papis_records()` for details)
  ##' @return Data frame. If some of the column values have length > 1 then the table will be filled with these values.
  ##' 
  ##' @md 
  ##' @export 
  tabulate_papis_records <- function(papis_records, ...) {
      fun_call <- sys.call()
      col_names <- ...names()
      papis_table <- 
          papis_records |>
          lapply(\(papis_record) {
              lapply(col_names
                   , \(col_name) {
                       col_val <- 
                           fun_call[[col_name]] |>
                           eval(papis_record)
                       if(length(col_val) == 0) {
                           return(NA)
                       } else if(is.list(col_val) || length(col_val) > 1) {
                           col_val <- 
                               col_val |>
                               lapply(\(col_val_el) if(length(col_val_el) == 0) NA else col_val_el) |>
                               unlist()
                           return(col_val)
                       } else {
                           return(col_val)
                       }
                   }) |>
                  `names<-`(col_names) |>
                  as.data.frame(stringsAsFactors = FALSE
                              , check.names = FALSE)
          })
      do.call(rbind, papis_table)
  }

#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_tabulate_papis_records.r
  expect_equal(system.file("testdata", "papis", package = "papisr") |>
               collect_papis_records() |>
               tabulate_papis_records(year = info$year
                                    , url = info$url
                                    , tag = length(info$tags))
  , structure(list(year = c(2022L, 1985L, 2222L, 2000L), url = c("example.com", 
  "uvt.nl", NA, NA), tag = c(2L, 2L, 1L, 1L)), row.names = c(NA, 
  -4L), class = "data.frame"))


  ## test filling the columns
  expect_equal(
      system.file("testdata", "papis", package = "papisr") |>
               collect_papis_records() |>
               tabulate_papis_records(year = info$year
                                    , url = info$url
                                    , tag = info$tags)
  , structure(list(year = c(2022L, 2022L, 1985L, 1985L, 2222L, 2000L
  ), url = c("example.com", "example.com", "uvt.nl", "uvt.nl", 
  NA, NA), tag = c("data", "research", "research", "phd", "data", 
                   "classics")), row.names = c(NA, -6L), class = "data.frame"))


#+END_SRC

